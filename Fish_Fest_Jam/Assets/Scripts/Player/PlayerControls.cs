//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Badminton"",
            ""id"": ""7e1bbbf9-834f-4656-8130-605f892ab75c"",
            ""actions"": [
                {
                    ""name"": ""Hit"",
                    ""type"": ""Button"",
                    ""id"": ""959226ab-d535-4c27-a533-f166f23bf2a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e3ffe779-eda4-4a4c-9e32-69c781fb3668"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9154bf02-5a7c-4104-9ff1-b72312b1e816"",
                    ""path"": ""Keyboard/Spacebar"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""10292fcb-6277-4164-af18-6f248b1360e1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cb42e269-d901-44ee-ab4a-3de81c9a62cf"",
                    ""path"": ""Keyboard/A"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9f09e8b9-4b89-49d3-9ce4-e245d838607b"",
                    ""path"": ""Keyboard/D"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""616db6b2-d384-481d-b1f6-7880259285fa"",
                    ""path"": ""Keyboard/W"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5c25d656-0fce-41ba-86ba-200aa070da9b"",
                    ""path"": ""Keyboard/S"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""FishJam"",
            ""id"": ""e45aa2a8-0978-473c-95d4-dcd114a9d5cb"",
            ""actions"": [
                {
                    ""name"": ""Key1"",
                    ""type"": ""Button"",
                    ""id"": ""857fd46b-6924-4ad9-b94b-adebef208be9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key2"",
                    ""type"": ""Button"",
                    ""id"": ""7e20892a-52fb-4260-99ee-75d0c8a1f2fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key3"",
                    ""type"": ""Button"",
                    ""id"": ""8c639857-1e1e-4bbc-8d1b-147111c63ddb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Key4"",
                    ""type"": ""Button"",
                    ""id"": ""888d6b64-2fd4-4e8b-8101-ddc86691e835"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""79e63e39-52c5-4edb-8048-009b3c42a71f"",
                    ""path"": ""Keyboard/Q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77a38032-6fd2-419d-b7d4-7a140d005ff9"",
                    ""path"": ""Keyboard/W"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a043f049-5e06-4ffb-9b59-5ac27f622739"",
                    ""path"": ""Keyboard/E"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a37a1ba5-d7ba-4819-a5b3-4fff317550ff"",
                    ""path"": ""Keyboard/R"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Key4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Badminton
        m_Badminton = asset.FindActionMap("Badminton", throwIfNotFound: true);
        m_Badminton_Hit = m_Badminton.FindAction("Hit", throwIfNotFound: true);
        m_Badminton_Move = m_Badminton.FindAction("Move", throwIfNotFound: true);
        // FishJam
        m_FishJam = asset.FindActionMap("FishJam", throwIfNotFound: true);
        m_FishJam_Key1 = m_FishJam.FindAction("Key1", throwIfNotFound: true);
        m_FishJam_Key2 = m_FishJam.FindAction("Key2", throwIfNotFound: true);
        m_FishJam_Key3 = m_FishJam.FindAction("Key3", throwIfNotFound: true);
        m_FishJam_Key4 = m_FishJam.FindAction("Key4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Badminton
    private readonly InputActionMap m_Badminton;
    private List<IBadmintonActions> m_BadmintonActionsCallbackInterfaces = new List<IBadmintonActions>();
    private readonly InputAction m_Badminton_Hit;
    private readonly InputAction m_Badminton_Move;
    public struct BadmintonActions
    {
        private @PlayerControls m_Wrapper;
        public BadmintonActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Hit => m_Wrapper.m_Badminton_Hit;
        public InputAction @Move => m_Wrapper.m_Badminton_Move;
        public InputActionMap Get() { return m_Wrapper.m_Badminton; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BadmintonActions set) { return set.Get(); }
        public void AddCallbacks(IBadmintonActions instance)
        {
            if (instance == null || m_Wrapper.m_BadmintonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BadmintonActionsCallbackInterfaces.Add(instance);
            @Hit.started += instance.OnHit;
            @Hit.performed += instance.OnHit;
            @Hit.canceled += instance.OnHit;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IBadmintonActions instance)
        {
            @Hit.started -= instance.OnHit;
            @Hit.performed -= instance.OnHit;
            @Hit.canceled -= instance.OnHit;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IBadmintonActions instance)
        {
            if (m_Wrapper.m_BadmintonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBadmintonActions instance)
        {
            foreach (var item in m_Wrapper.m_BadmintonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BadmintonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BadmintonActions @Badminton => new BadmintonActions(this);

    // FishJam
    private readonly InputActionMap m_FishJam;
    private List<IFishJamActions> m_FishJamActionsCallbackInterfaces = new List<IFishJamActions>();
    private readonly InputAction m_FishJam_Key1;
    private readonly InputAction m_FishJam_Key2;
    private readonly InputAction m_FishJam_Key3;
    private readonly InputAction m_FishJam_Key4;
    public struct FishJamActions
    {
        private @PlayerControls m_Wrapper;
        public FishJamActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Key1 => m_Wrapper.m_FishJam_Key1;
        public InputAction @Key2 => m_Wrapper.m_FishJam_Key2;
        public InputAction @Key3 => m_Wrapper.m_FishJam_Key3;
        public InputAction @Key4 => m_Wrapper.m_FishJam_Key4;
        public InputActionMap Get() { return m_Wrapper.m_FishJam; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FishJamActions set) { return set.Get(); }
        public void AddCallbacks(IFishJamActions instance)
        {
            if (instance == null || m_Wrapper.m_FishJamActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FishJamActionsCallbackInterfaces.Add(instance);
            @Key1.started += instance.OnKey1;
            @Key1.performed += instance.OnKey1;
            @Key1.canceled += instance.OnKey1;
            @Key2.started += instance.OnKey2;
            @Key2.performed += instance.OnKey2;
            @Key2.canceled += instance.OnKey2;
            @Key3.started += instance.OnKey3;
            @Key3.performed += instance.OnKey3;
            @Key3.canceled += instance.OnKey3;
            @Key4.started += instance.OnKey4;
            @Key4.performed += instance.OnKey4;
            @Key4.canceled += instance.OnKey4;
        }

        private void UnregisterCallbacks(IFishJamActions instance)
        {
            @Key1.started -= instance.OnKey1;
            @Key1.performed -= instance.OnKey1;
            @Key1.canceled -= instance.OnKey1;
            @Key2.started -= instance.OnKey2;
            @Key2.performed -= instance.OnKey2;
            @Key2.canceled -= instance.OnKey2;
            @Key3.started -= instance.OnKey3;
            @Key3.performed -= instance.OnKey3;
            @Key3.canceled -= instance.OnKey3;
            @Key4.started -= instance.OnKey4;
            @Key4.performed -= instance.OnKey4;
            @Key4.canceled -= instance.OnKey4;
        }

        public void RemoveCallbacks(IFishJamActions instance)
        {
            if (m_Wrapper.m_FishJamActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFishJamActions instance)
        {
            foreach (var item in m_Wrapper.m_FishJamActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FishJamActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FishJamActions @FishJam => new FishJamActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IBadmintonActions
    {
        void OnHit(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IFishJamActions
    {
        void OnKey1(InputAction.CallbackContext context);
        void OnKey2(InputAction.CallbackContext context);
        void OnKey3(InputAction.CallbackContext context);
        void OnKey4(InputAction.CallbackContext context);
    }
}
